/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : PDF2TEXT
 #	author : miyako
 #	2015/08/03
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void OnStartup(){  

    //define environment varaibles: [FONTCONFIG_FILE, FONTCONFIG_PATH]

#if VERSIONMAC
    NSBundle *thisBundle = [NSBundle bundleWithIdentifier:@"com.4D.PDF2TEXT"];
    if(thisBundle){
        NSString *FONTCONFIG_FILE = [thisBundle pathForResource:@"fonts" ofType:@"conf" inDirectory:@"fonts"];
        if(FONTCONFIG_FILE){
            NSString *FONTCONFIG_PATH = [FONTCONFIG_FILE stringByDeletingLastPathComponent];
            //but we will still see lots of "some font thing failed"
            setenv("FONTCONFIG_FILE", [FONTCONFIG_FILE UTF8String], 0);
            setenv("FONTCONFIG_PATH", [FONTCONFIG_PATH UTF8String], 0);   
        }
    }
#else
    wchar_t	thisPath[_MAX_PATH] = {0};
	wchar_t	fDrive[_MAX_DRIVE], fDir[_MAX_DIR], fName[_MAX_FNAME], fExt[_MAX_EXT];
    
    HMODULE hplugin = GetModuleHandleW(L"PDF2TEXT.4DX");
    GetModuleFileNameW(hplugin, thisPath, _MAX_PATH);
    _wsplitpath_s(thisPath, fDrive, fDir, fName, fExt);
    
    std::wstring path = fDrive;
    path += fDir;//path to plugin parent folder
    
    if(path.at(path.size() - 1) == L'\\')//remove delimiter
        path = path.substr(0, path.size() - 1);
    
    _wsplitpath_s(path.c_str(), fDrive, fDir, fName, fExt);
    wchar_t resourcesPath[_MAX_PATH] = {0};
    _wmakepath_s(resourcesPath, fDrive, fDir, L"Resources\\", NULL);
    
    std::wstring FONTCONFIG_FILE = resourcesPath;
	FONTCONFIG_FILE += L"fonts\\fonts.conf";
    std::wstring FONTCONFIG_PATH = resourcesPath;
	FONTCONFIG_PATH += L"fonts\\";
    
    SetEnvironmentVariable(L"FONTCONFIG_FILE", FONTCONFIG_FILE.c_str());
    SetEnvironmentVariable(L"FONTCONFIG_PATH", FONTCONFIG_PATH.c_str());
#endif

#if !GLIB_CHECK_VERSION(2,35,0)
	g_type_init();// Initialise the GType library
    //http://askubuntu.com/questions/262574/how-to-correct-glib-2-35-x-g-type-init-is-deprecated-error-when-compiling-from
#endif    
}

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
        case kInitPlugin :
        case kServerInitPlugin :            
            OnStartup();
            break;    
      
// --- Text

		case 1 :
			PDF_Get_text(pResult, pParams);
			break;

	}
}

// ------------------------------------- Text -------------------------------------

#define PDF2SVG_ERROR_InvalidSourceData (-1)
#define PDF2SVG_ERROR_InvalidReturnType (-2)
#define PDF2SVG_ERROR_AbortedByUser (-3)

void PDF_Get_text(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_BLOB Param1;
	ARRAY_TEXT Param2;
	C_LONGINT Param3;
	C_LONGINT Param4;
	C_TEXT Param5;
	C_TEXT Param6;
	C_TEXT Param7;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	Param6.fromParamAtIndex(pParams, 6);
	Param7.fromParamAtIndex(pParams, 7);

	int startPage = Param3.getIntValue();
    int finalPage = Param4.getIntValue();
    
    //callback
    method_id_t methodId = PA_GetMethodID((PA_Unichar *)Param6.getUTF16StringPtr());
    bool abortedByCallbackMethod = false;
    bool isCallbackActive = false;
    int number_entry;

    PopplerDocument *pdffile;
    PopplerPage *page;
    
    char *data = (char *)Param1.getBytesPtr();
    int length = (int)Param1.getBytesLength();
    
    CUTF8String Password;
    Param5.copyUTF8String(&Password);
    const char *password = Password.length() ? (const char *)Password.c_str() : NULL;
    
    pdffile = poppler_document_new_from_data(data, length, password, NULL);
    
    if(pdffile){

        int pageCount = poppler_document_get_n_pages(pdffile);
            
        startPage = (startPage > 0) ? startPage : 1;
        startPage = (startPage < pageCount) ? startPage : pageCount;
        
        finalPage = (finalPage > startPage) ? finalPage : pageCount;
        finalPage = (finalPage < pageCount) ? finalPage : pageCount;
        
        startPage--;
        finalPage--;
        
        if(methodId){
            number_entry = (finalPage - startPage) + 1;
            isCallbackActive = true;
        }
        
        Param2.setSize(1);
        
        int currentpageInd = 0;
            
        for(int pageInd = startPage; pageInd < pageCount; ++pageInd) {
                            
            currentpageInd++;
            
            PA_YieldAbsolute();
            
            page = poppler_document_get_page(pdffile, pageInd);
            
            if(page){
            
                char *pageText = poppler_page_get_text(page);
                CUTF8String pageTextUtf8((const uint8_t *)pageText);
                C_TEXT pageTextUtf16;
                pageTextUtf16.setUTF8String(&pageTextUtf8);
                
                Param2.appendUTF16String(pageTextUtf16.getUTF16StringPtr());
                
                //callback
                if(isCallbackActive){
                    PA_Variable	params[4];
                    params[0] = PA_CreateVariable(eVK_Longint);
                    params[1] = PA_CreateVariable(eVK_Longint);
                    params[2] = PA_CreateVariable(eVK_Longint);
                    params[3] = PA_CreateVariable(eVK_Unistring);
                    PA_Unistring u = PA_CreateUnistring((PA_Unichar *)pageTextUtf16.getUTF16StringPtr());
                    
                    PA_SetLongintVariable(&params[0], currentpageInd);
                    PA_SetLongintVariable(&params[1], number_entry);
                    PA_SetLongintVariable(&params[2], pageInd + 1);
                    PA_SetStringVariable(&params[3], &u);
                    
                    PA_Variable result = PA_ExecuteMethodByID(methodId, params, 4);
                    PA_DisposeUnistring(&u);
                    if(PA_GetVariableKind(result) == eVK_Boolean){
                        abortedByCallbackMethod = PA_GetBooleanVariable(result);
                    }
                    
                }
            
            }//page
            
            if(abortedByCallbackMethod){
                pageInd = pageCount;
                returnValue.setIntValue(PDF2SVG_ERROR_AbortedByUser);   
            }
            
        }
    
        g_object_unref(pdffile);
    
    }else{
        returnValue.setIntValue(PDF2SVG_ERROR_InvalidSourceData);
    }    

	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

